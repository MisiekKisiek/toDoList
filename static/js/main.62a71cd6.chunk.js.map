{"version":3,"sources":["components/img/logo.png","components/Input.js","components/ListItem.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","props","issue","priority","date","submit","change","htmlFor","type","name","value","onChange","className","style","position","id","checked","onClick","ListItem","toDo","removeElement","color","fontSize","App","state","clearState","setState","prevState","concat","handleSubmit","e","preventDefault","length","handleChange","target","createIssueElement","key","handleChangeElement","handleDeleteElement","showIssues","filter","map","showDoneIssues","listId","items","Date","today","getFullYear","getMonth","getDay","this","src","logo","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62a71cd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.76f72909.png\";","import React, { Component } from \"react\";\r\n\r\nconst Input = props => {\r\n  const { issue, priority, date, submit, change } = props;\r\n  return (\r\n    <form>\r\n      <label htmlFor=\"issue\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"issue\"\r\n          value={issue}\r\n          onChange={change}\r\n          className=\"issue\"\r\n        />\r\n      </label>\r\n      <label htmlFor=\"priority\" style={{ position: \"relative\" }}>\r\n        <label htmlFor=\"checkbox\" className=\"checkboxLabel\">\r\n          <input\r\n            className=\"priority\"\r\n            type=\"checkbox\"\r\n            name=\"priority\"\r\n            id=\"\"\r\n            checked={priority}\r\n            onChange={change}\r\n          />\r\n          <span className=\"checkboxCustom\"></span>\r\n        </label>\r\n        <span>Priority</span>\r\n      </label>\r\n      <label htmlFor=\"date\" className=\"dateLabel\">\r\n        Deadline:{\" \"}\r\n        <input type=\"date\" name=\"date\" value={date} onChange={change} />\r\n      </label>\r\n      <label htmlFor=\"button\">\r\n        <button onClick={submit}>\r\n          <p>Dodaj</p>\r\n        </button>\r\n      </label>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nconst ListItem = props => {\r\n  const { id, issue, priority, date, toDo, change, removeElement } = props;\r\n  return (\r\n    <li id={id} className={priority ? \"priority clearfix\" : \"clearfix\"}>\r\n      <span>\r\n        {priority ? (\r\n          <p style={{ color: \"rgb(235, 118, 118)\", fontSize: \"16px\" }}>\r\n            !!! IMPORTANT !!!\r\n          </p>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {issue}\r\n      </span>\r\n      <div>\r\n        <span>\r\n          Deadline: <p>{date}</p>\r\n        </span>\r\n        <button onClick={change} id={id}>\r\n          {toDo ? \"Zadanie wykonane\" : \"Zadanie nie wykonane\"}\r\n        </button>\r\n        <button onClick={removeElement} id={id}>\r\n          x\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ListItem;\r\n","import React, { Component } from \"react\";\r\nimport \"./style/App.css\";\r\nimport \"./style/Input.css\";\r\nimport \"./style/Lists.css\";\r\nimport Input from \"./Input\";\r\nimport ListItem from \"./ListItem\";\r\nimport logo from \"./img/logo.png\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    issue: \"\",\r\n    priority: false,\r\n    date: \"2020-03-07\",\r\n    toDo: []\r\n  };\r\n  componentDidMount() {\r\n    const date = new Date();\r\n    const today = `${date.getFullYear()}-${\r\n      date.getMonth() < 10 ? \"0\" + date.getMonth() : date.getMonth()\r\n    }-${date.getDay() < 10 ? \"0\" + date.getMonth() : date.getMonth()}`;\r\n    this.setState({\r\n      date: today\r\n    });\r\n  }\r\n  clearState = issue => {\r\n    if (this.state.issue) {\r\n      this.setState(prevState => ({\r\n        issue: \"\",\r\n        priority: false,\r\n        date: \"2020-03-07\",\r\n        toDo: prevState.toDo.concat(issue)\r\n      }));\r\n    }\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const issue = {\r\n      id: this.state.toDo.length,\r\n      issue: this.state.issue,\r\n      priority: this.state.priority,\r\n      date: this.state.date,\r\n      toDo: true\r\n    };\r\n    this.clearState(issue);\r\n  };\r\n\r\n  handleChange = e => {\r\n    const type = e.target.type;\r\n    if (type === \"text\") {\r\n      this.setState({\r\n        [e.target.name]: e.target.value\r\n      });\r\n    } else if (type === \"checkbox\") {\r\n      this.setState({\r\n        [e.target.name]: e.target.checked\r\n      });\r\n    } else if (type === \"date\") {\r\n      this.setState({\r\n        [e.target.name]: e.target.value\r\n      });\r\n    }\r\n  };\r\n\r\n  createIssueElement = e => {\r\n    return (\r\n      <ListItem\r\n        key={e.id}\r\n        id={e.id}\r\n        issue={e.issue}\r\n        priority={e.priority}\r\n        date={e.date}\r\n        toDo={e.toDo}\r\n        change={this.handleChangeElement}\r\n        removeElement={this.handleDeleteElement}\r\n      />\r\n    );\r\n  };\r\n  showIssues = () => {\r\n    const issues = this.state.toDo\r\n      .filter(e => e.toDo === true)\r\n      .map(e => this.createIssueElement(e));\r\n    return issues;\r\n  };\r\n\r\n  showDoneIssues = () => {\r\n    const issues = this.state.toDo\r\n      .filter(e => e.toDo === false)\r\n      .map(e => this.createIssueElement(e));\r\n    return issues;\r\n  };\r\n\r\n  handleChangeElement = e => {\r\n    const listId = e.target.id;\r\n    const kapa = function(e) {\r\n      if (e.id == listId) {\r\n        return {\r\n          id: e.id,\r\n          issue: e.issue,\r\n          priority: e.priority,\r\n          date: e.date,\r\n          toDo: !e.toDo\r\n        };\r\n      } else {\r\n        return e;\r\n      }\r\n    };\r\n    const items = this.state.toDo.map(kapa);\r\n    this.setState({\r\n      toDo: items\r\n    });\r\n  };\r\n\r\n  handleDeleteElement = e => {\r\n    const listId = e.target.id;\r\n    const kapa = function(e) {\r\n      if (e.id == listId) {\r\n        return {\r\n          id: e.id,\r\n          issue: e.issue,\r\n          priority: e.priority,\r\n          date: e.date,\r\n          toDo: \"huj\"\r\n        };\r\n      } else {\r\n        return e;\r\n      }\r\n    };\r\n    const items = this.state.toDo.map(kapa);\r\n    this.setState({\r\n      toDo: items\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <header>\r\n          <img src={logo} alt=\"\" />\r\n          <span>ToDo list</span>\r\n        </header>\r\n        <Input\r\n          issue={this.state.issue}\r\n          priority={this.state.priority}\r\n          date={this.state.date}\r\n          submit={this.handleSubmit}\r\n          change={this.handleChange}\r\n        />\r\n        <div className=\"lists\">\r\n          <ul>\r\n            <h2>ToDo Issues</h2>\r\n            {this.showIssues()}\r\n          </ul>\r\n          <ul>\r\n            <h2>Done Issues</h2>\r\n            {this.showDoneIssues()}\r\n          </ul>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}